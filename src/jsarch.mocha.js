import assert from 'assert';
import sinon from 'sinon';
import Knifecycle, { constant } from 'knifecycle';
import initJSArch, { DEFAULT_CONFIG } from './jsarch';
import initParser from './parser';

const JSARCH_PREFIX = `[//]: # ( )
[//]: # (This file is automatically generated by the \`jsarch\`)
[//]: # (module. Do not change it elsewhere, changes would)
[//]: # (be overriden.)
[//]: # ( )
`;

describe('jsArch service', () => {
  const logStub = sinon.stub();
  const globStub = sinon.stub();
  const readFileAsyncStub = sinon.stub();
  let $;

  beforeEach(() => {
    $ = new Knifecycle();
    $.register(constant('EOL', '\n'));
    $.register(constant('CONFIG', DEFAULT_CONFIG));
    $.register(constant('log', logStub));
    $.register(constant('glob', globStub));
    $.register(constant('fs', { readFileAsync: readFileAsyncStub }));
    $.register(initParser);
    $.register(initJSArch);
  });

  afterEach(() => {
    logStub.reset();
    globStub.reset();
    readFileAsyncStub.reset();
  });

  it('with no architecture notes', async () => {
    globStub.returns(
      Promise.resolve([
        '/home/me/project/lulz.js',
        '/home/me/project/kikoo.js',
      ]),
    );

    readFileAsyncStub.returns(
      Promise.resolve(`

console.log('test');

    `),
    );

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    assert.deepEqual(readFileAsyncStub.args, [
      ['/home/me/project/lulz.js', 'utf-8'],
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    assert.equal(content, '');
  });

  it('with some architecture notes in a file', async () => {
    globStub.returns(Promise.resolve(['/home/me/project/kikoo.js']));

    readFileAsyncStub.returns(
      Promise.resolve(`

/* Architecture Note #1: Title

Some content !
*/

console.log('test');

    `),
    );

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    assert.deepEqual(readFileAsyncStub.args, [
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    assert.equal(
      content,
      `${JSARCH_PREFIX}# Architecture Notes



## Title

Some content !

[See in context](./blob/master/kikoo.js#L3-L6)

`,
    );
  });

  it('with some architecture notes in a TypeScript file', async () => {
    $.register(
      constant('CONFIG', {
        ...DEFAULT_CONFIG,
        parserOptions: {
          ...DEFAULT_CONFIG.parserOptions,
          plugins: ['typescript'],
        },
      }),
    );
    globStub.returns(Promise.resolve(['/home/me/project/kikoo.js']));

    readFileAsyncStub.returns(
      Promise.resolve(`

interface lol {
  lol : string;
}

/* Architecture Note #1: Title

Some content !
*/

console.log('test');

    `),
    );

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    assert.deepEqual(readFileAsyncStub.args, [
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    assert.equal(
      content,
      `${JSARCH_PREFIX}# Architecture Notes



## Title

Some content !

[See in context](./blob/master/kikoo.js#L7-L10)

`,
    );
  });

  it('with some architecture notes in a file and bitbucket links', async () => {
    $.register(
      constant('CONFIG', {
        ...DEFAULT_CONFIG,
        gitProvider: 'bitbucket',
      }),
    );

    globStub.returns(Promise.resolve(['/home/me/project/kikoo.js']));

    readFileAsyncStub.returns(
      Promise.resolve(`

/* Architecture Note #1: Title

Some content !
*/

console.log('test');

    `),
    );

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    assert.deepEqual(readFileAsyncStub.args, [
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    assert.equal(
      content,
      `${JSARCH_PREFIX}# Architecture Notes



## Title

Some content !

[See in context](./blob/master/kikoo.js#kikoo.js-3:6)

`,
    );
  });

  it('with some indented architecture notes in a file', async () => {
    globStub.returns(Promise.resolve(['/home/me/project/kikoo.js']));

    readFileAsyncStub.returns(
      Promise.resolve(`

    /* Architecture Note #1: Title

    Some content !
    Nice!
    */

console.log('test');

    `),
    );

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    assert.deepEqual(readFileAsyncStub.args, [
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    assert.equal(
      content,
      `${JSARCH_PREFIX}# Architecture Notes



## Title

Some content !
Nice!

[See in context](./blob/master/kikoo.js#L3-L7)

`,
    );
  });

  it('with architecture notes in several files', async () => {
    globStub.returns(
      Promise.resolve([
        '/home/me/project/lulz.js',
        '/home/me/project/kikoo.js',
      ]),
    );

    readFileAsyncStub.onFirstCall().returns(
      Promise.resolve(`
/* Architecture Note #1.1: Title 1.1

Some content !
*/

console.log('test');
/* Architecture Note #1: Title 1

Some content !
*/

    `),
    );

    readFileAsyncStub.onSecondCall().returns(
      Promise.resolve(`
/* Architecture Note #1.3: Title 1.3

Some content !
*/

console.log('test');
/* Architecture Note #2: Title 2

Some content !
*/

    `),
    );

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    assert.deepEqual(readFileAsyncStub.args, [
      ['/home/me/project/lulz.js', 'utf-8'],
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    assert.equal(
      content,
      `${JSARCH_PREFIX}# Architecture Notes



## Title 1

Some content !

[See in context](./blob/master/lulz.js#L8-L11)



### Title 1.1

Some content !

[See in context](./blob/master/lulz.js#L2-L5)



### Title 1.3

Some content !

[See in context](./blob/master/kikoo.js#L2-L5)



## Title 2

Some content !

[See in context](./blob/master/kikoo.js#L8-L11)

`,
    );
  });
});
